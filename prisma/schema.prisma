// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  logoUrl    String      @default("")
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  textColor  String     @default("#000000")
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  storeId     String
  billboardId String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Product {
  id               String      @id @default(uuid())
  storeId          String
  categoryId       String
  name             String
  shortDescription String      @default("") @db.Text
  descriptionFile  String      @default("")
  price            Decimal
  inventory        Int         @default(0)
  isFeatured       Boolean     @default(false)
  isArchived       Boolean     @default(false)
  sizes            Size[]
  colors           Color[]
  store            Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category         Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  images           Image[]
  orderItems       OrderItem[]
  reviews          Review[]

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  client     Client      @relation(fields: [clientId], references: [id])
  clientId   Int         @default(0)

  @@index([storeId])
  @@index([clientId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  firstName String
  lastName  String
  message   String
  rating    Decimal
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Client {
  id      Int      @id @default(autoincrement())
  email   String   @default("")
  name    String   @default("")
  phone   String   @default("")
  address Address?
  orders  Order[]
}

model Address {
  id         Int    @id @default(autoincrement())
  city       String @default("")
  country    String @default("")
  line1      String @default("")
  line2      String @default("")
  postalCode String @default("")
  state      String @default("")
  clientId   Int    @unique
  client     Client @relation(fields: [clientId], references: [id])

  @@index([clientId])
}
